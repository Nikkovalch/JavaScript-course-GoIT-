//Arro_functions......................
// let res;
// const foo = (a, b) => {
//   return a + b;
// };

// console.log(foo(4, 8));

//–Ω–µ —è–≤–Ω–µ –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è................

// const total = (a, b) => a + b;

// console.log(total(4, 6));

//–û–ø–µ—Ä–∞—Ü—ñ—è ...rest —â–æ–± –∑—ñ–±—Ä–∞—Ç–∏ –≤—Å—ñ –∞—Ä–≥—É–º–µ–Ω—Ç–∏ –≤ –º–∞—Å–∏–≤
// const foo = (...rest) => {
//   console.log(rest);
// }

// foo(2,3,4,5,65,6,7)

//–°—Ç—Ä—ñ–ª–æ—á–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó —è–∫ –∫–æ–ª–±–µ–∫–∏..........................
// const numbers = [5, 10, 15, 20, 25];

// numbers.forEach(function(item, idx, arg){
//   console.log(item);
// }) 

// numbers.forEach((item, idx, arg) => {
//   console.log(item);
// })

//–°—Ç—Ä—ñ–ª–æ—á–Ω—É –∫–æ–ª–±–µ–∫-—Ñ—É–Ω–∫—Ü—ñ—é —Ç–∞–∫–æ–∂ –º–æ–∂–Ω–∞ –æ–≥–æ–ª–æ—à—É–≤–∞—Ç–∏ –æ–∫—Ä–µ–º–æ —ñ –ø–µ—Ä–µ–¥–∞–≤–∞—Ç–∏ –Ω–∞ –Ω–µ—ó –ø–æ—Å–∏–ª–∞–Ω–Ω—è. ..............
// const numbers = [5, 10, 15, 20, 25];
// const num = [15, 102, 153, 290, 245];

// const logMessage = (number, index) => {
//   console.log(`–Ü–Ω–¥–µ–∫—Å ${index}, –∑–Ω–∞—á–µ–Ω–Ω—è ${number}`);
// };

// numbers.forEach(logMessage);

// num.forEach(logMessage)


// const numbers = [1, 2, 3, 4, 5];
// const filteredNumbers = numbers.filter((value) => value > 3);
// console.log(filteredNumbers); 


//===================task========================
// const pizzaPalace = {
//   pizzas: ["Ultracheese", "Smoked", "Four meats"],
//   order(pizzaName, onSuccess, onError) {
//       if(!this.pizzas.includes(pizzaName)) {
//         return onError(`There is no pizza with a name ${pizzaName} in the assortment.`)
//       }
//         return onSuccess(pizzaName)
//   },
// };
// // Change code above this line


// // Callback for onSuccess
// function makePizza(pizzaName) {
//   return `Your order is accepted. Cooking pizza ${pizzaName}.`;
// }

// // Callback for onError
// function onOrderError(error) {
//   return `Error! ${error}`;
// }

// // Method calls with callbacks
// console.log(pizzaPalace.order("Smoked", makePizza, onOrderError));
// pizzaPalace.order("Four meats", makePizza, onOrderError);
// pizzaPalace.order("Big Mike", makePizza, onOrderError);
// pizzaPalace.order("Vienna", makePizza, onOrderError);

//=========================task==============================

// function changeEven(numbers, value) {
//   // Change code below this line
//   let num = numbers
//   for (let i = 0; i < num.length; i += 1) {
//     if (num[i] % 2 === 0) {
//       num[i] = num[i] + value;
//     }
//   }

//   return num
//   // Change code above this line
// }

// console.log(changeEven([1,23,4,5,6], 10));
//=====================task=====================================
// const math = (a, b, foo) => {
//   const result = foo(a, b);
//   console.log("–¢–∞–∫–∏–π –≤–æ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç üòãü§°ü§ì", result);
// }

// math(5, 7, (x, y) => x + y);
// math(7,2, (x, y) => x + y);
//$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$–ú–æ–¥—É–ª—å 4. –ó–∞–Ω—è—Ç—Ç—è 7. –ö–æ–ª–ª–±–µ–∫–∏. –°—Ç—Ä—ñ–ª–æ—á–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó. forEach===============================

// Example 1 - –ö–æ–ª–ª–±–µ–∫ —Ñ—É–Ω–∫—Ü—ñ—ó
// –ù–∞–ø–∏—à—ñ—Ç—å –Ω–∞—Å—Ç—É–ø–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó:

// createProduct(obj, callback) - –ø—Ä–∏–π–º–∞—î –æ–±'—î–∫—Ç —Ç–æ–≤–∞—Ä—É –±–µ–∑ id, –∞ —Ç–∞–∫–æ–∂ –∫–æ–ª–ª–±–µ–∫. 
//–§—É–Ω–∫—Ü—ñ—è —Å—Ç–≤–æ—Ä—é—î –æ–±'—î–∫—Ç —Ç–æ–≤–∞—Ä—É, –¥–æ–¥–∞—é—á–∏ –π–æ–º—É —É–Ω—ñ–∫–∞–ª—å–Ω–∏–π —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä —É –≤–ª–∞—Å—Ç–∏–≤—ñ—Å—Ç—å id 
//—Ç–∞ –≤–∏–∫–ª–∏–∫–∞—î –∫–æ–ª–ª–±–µ–∫ –ø–µ—Ä–µ–¥–∞—é—á–∏ –π–æ–º—É —Å—Ç–≤–æ—Ä–µ–Ω–∏–π –æ–±'—î–∫—Ç.
// logProduct(product) - –∫–æ–ª–±–±–µ–∫ –ø—Ä–∏–π–º–∞—é—á–∏–π –æ–±'—î–∫—Ç –ø—Ä–æ–¥—É–∫—Ç—É —ñ –ª–æ–≥—É—é—á–∏–π –π–æ–≥–æ –≤ –∫–æ–Ω—Å–æ–ª—å
// logTotalPrice(product) - –∫–æ–ª–±–±–µ–∫, —â–æ –ø—Ä–∏–π–º–∞—î –æ–±'—î–∫—Ç –ø—Ä–æ–¥—É–∫—Ç—É —ñ –ª–æ–≥—ñ—é—î –∑–∞–≥–∞–ª—å–Ω—É –≤–∞—Ä—Ç—ñ—Å—Ç—å —Ç–æ–≤–∞—Ä—É –≤ –∫–æ–Ω—Å–æ–ª—å
// –†—ñ—à–µ–Ω–Ω—è

// const createProduct = (obj, callback) => {
//   const product = {
//     id: Date.now(),
//     ...obj
//   }
//   return callback(product)
// }

// const logProduct = (product) => product;
// const logTotalPrice = ({quantity, price}) => quantity * price;

// console.log(createProduct({name: "üçå", quantity: 6, price: 15,}, logProduct));
// console.log(createProduct({name: "üçì", quantity: 6, price: 15,}, logTotalPrice));
//==================================Example 2 - –ö–æ–ª–ª–±–µ–∫ —Ñ—É–Ω–∫—Ü—ñ—ó
/*–î–æ–¥–∞–π—Ç–µ –æ–±'—î–∫—Ç account –º–µ—Ç–æ–¥–∏ withdraw(amount, onSuccess, onError) 
—Ç–∞ deposit(amount, onSuccess, onError), –¥–µ –ø–µ—Ä—à–∏–π –ø–∞—Ä–∞–º–µ—Ç—Ä —Ü–µ —Å—É–º–∞ –æ–ø–µ—Ä–∞—Ü—ñ—ó, –∞ –¥—Ä—É–≥–∏–π —Ç–∞ —Ç—Ä–µ—Ç—ñ–π - –∫–æ–ª–ª–±–µ–∫–∏.*/

/*–ú–µ—Ç–æ–¥ withdraw –≤–∏–∫–ª–∏–∫–∞—î onError —è–∫—â–æ amount –±—ñ–ª—å—à–µ 
TRANSACTION_LIMIT –∞–±–æ this.balance, —ñ onSuccess –≤ —ñ–Ω—à–æ–º—É –≤–∏–ø–∞–¥–∫—É.*/

/*–ú–µ—Ç–æ–¥ deposit –≤–∏–∫–ª–∏–∫–∞—î onError —è–∫—â–æ amount –±—ñ–ª—å—à–µ 
TRANSACTION_LIMIT –∞–±–æ –º–µ–Ω—à–µ –∞–±–æ –¥–æ—Ä—ñ–≤–Ω—é—î –Ω—É–ª—é, —ñ onSuccess –≤ —ñ–Ω—à–æ–º—É –≤–∏–ø–∞–¥–∫—É.*/

// –†—ñ—à–µ–Ω–Ω—è
// const TRANSACTION_LIMIT = 1000;

// const account = {
//   username: 'Jacob',
//   balance: 600,
//   withdraw(amount, onSuccess, onError) {
//     if(amount > TRANSACTION_LIMIT || amount > this.balance) {
//       return onError(`Transition limit ${TRANSACTION_LIMIT}$, your balance ${this.balance}`)
//     }
//     return onSuccess("Congratulations, the transaction was successful.")
//   },
//   deposit(amount, onSuccess, onError) {
//     if(amount > TRANSACTION_LIMIT || amount <= 0) {
//       return onError(`Transition limit ${TRANSACTION_LIMIT}$, your balance ${this.balance}`)
//     }
//      return onSuccess("Congratulations, the transaction was successful.")
//   },
// };

// function handleSuccess(message) {
//   console.log(`‚úÖ Success! ${message}`);
// }
// function handleError(message) {
//   console.log(`‚ùå Error! ${message}`);
// }


// account.withdraw(200, handleSuccess, handleError);
// // account.withdraw(600, handleSuccess, handleError);
// // account.withdraw(300, handleSuccess, handleError);
// account.deposit(1700, handleSuccess, handleError);
// account.deposit(0, handleSuccess, handleError);
// // account.deposit(-600, handleSuccess, handleError);
// account.deposit(600, handleSuccess, handleError);

//===========================================================================
// Example 3 - –ö–æ–ª–ª–±–µ–∫ —Ñ—É–Ω–∫—Ü—ñ—ó
//1. –ù–∞–ø–∏—à—ñ—Ç—å —Ñ—É–Ω–∫—Ü—ñ—é each(array, callback), 
//2. –ü–µ—Ä—à–∏–º –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º –æ—á—ñ–∫—É—î –º–∞—Å–∏–≤, 
//3. –î—Ä—É–≥–∏–º - —Ñ—É–Ω–∫—Ü—ñ—é, —è–∫–∞ –∑–∞—Å—Ç–æ—Å–æ–≤—É—î—Ç—å—Å—è –¥–æ –∫–æ–∂–Ω–æ–≥–æ –µ–ª–µ–º–µ–Ω—Ç–∞ –º–∞—Å–∏–≤—É. 
//4. –§—É–Ω–∫—Ü—ñ—è each –ø–æ–≤–∏–Ω–Ω–∞ –ø–æ–≤–µ—Ä–Ω—É—Ç–∏ –Ω–æ–≤–∏–π –º–∞—Å–∏–≤, –µ–ª–µ–º–µ–Ω—Ç–∞–º–∏ —è–∫–æ–≥–æ –±—É–¥—É—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ –≤–∏–∫–ª–∏–∫—É –∫–æ–ª–ª–±–µ–∫–∞.

// function each(array, callback) {
//   const newArray = []

//   for(const arr of array) {
//     newArray.push(callback(arr))
//   }

//   return newArray 
// }



// console.log(each([2, 4, 5, 6, 8], (value) => value * 2 ));
// console.log(each([22, 4, 53, 9, 88], (value) => value + 5 ));
// console.log(each([345, 55, 35, 611, 554], (value) => value / 2 ));


//================================================================================
// Example 4 - –°—Ç—Ä—ñ–ª–æ—á–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó
// –í–∏–∫–æ–Ω–∞–π—Ç–µ —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥ –∫–æ–¥—É –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é —Å—Ç—Ä—ñ–ª–æ—á–Ω–∏—Ö —Ñ—É–Ω–∫—Ü—ñ–π.

// const createProduct = (partialProduct, callback) => {
//   const product = { id: Date.now(), ...partialProduct };
//   callback(product);
// }

// const logProduct = product => console.log(product);
// const logTotalPrice = product => console.log(product.price * product.quantity);



// createProduct({ name: 'üçé', price: 30, quantity: 3 }, logProduct);
// createProduct({ name: 'üçã', price: 20, quantity: 5 }, logTotalPrice);
//=======================================================